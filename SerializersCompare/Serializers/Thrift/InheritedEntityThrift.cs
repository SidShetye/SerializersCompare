/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class InheritedEntityThrift : TBase
{
  private string _Message;
  private string _FunctionCall;
  private string _Parameters;
  private string _Name;
  private int _EmployeeId;
  private double _RaiseRate;
  private string _AddressLine1;
  private string _AddressLine2;
  private byte[] _Icon;
  private byte[] _LargeIcon;

  public string Message
  {
    get
    {
      return _Message;
    }
    set
    {
      __isset.Message = true;
      this._Message = value;
    }
  }

  public string FunctionCall
  {
    get
    {
      return _FunctionCall;
    }
    set
    {
      __isset.FunctionCall = true;
      this._FunctionCall = value;
    }
  }

  public string Parameters
  {
    get
    {
      return _Parameters;
    }
    set
    {
      __isset.Parameters = true;
      this._Parameters = value;
    }
  }

  public string Name
  {
    get
    {
      return _Name;
    }
    set
    {
      __isset.Name = true;
      this._Name = value;
    }
  }

  public int EmployeeId
  {
    get
    {
      return _EmployeeId;
    }
    set
    {
      __isset.EmployeeId = true;
      this._EmployeeId = value;
    }
  }

  public double RaiseRate
  {
    get
    {
      return _RaiseRate;
    }
    set
    {
      __isset.RaiseRate = true;
      this._RaiseRate = value;
    }
  }

  public string AddressLine1
  {
    get
    {
      return _AddressLine1;
    }
    set
    {
      __isset.AddressLine1 = true;
      this._AddressLine1 = value;
    }
  }

  public string AddressLine2
  {
    get
    {
      return _AddressLine2;
    }
    set
    {
      __isset.AddressLine2 = true;
      this._AddressLine2 = value;
    }
  }

  public byte[] Icon
  {
    get
    {
      return _Icon;
    }
    set
    {
      __isset.Icon = true;
      this._Icon = value;
    }
  }

  public byte[] LargeIcon
  {
    get
    {
      return _LargeIcon;
    }
    set
    {
      __isset.LargeIcon = true;
      this._LargeIcon = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool Message;
    public bool FunctionCall;
    public bool Parameters;
    public bool Name;
    public bool EmployeeId;
    public bool RaiseRate;
    public bool AddressLine1;
    public bool AddressLine2;
    public bool Icon;
    public bool LargeIcon;
  }

  public InheritedEntityThrift() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 10:
          if (field.Type == TType.String) {
            Message = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 20:
          if (field.Type == TType.String) {
            FunctionCall = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 30:
          if (field.Type == TType.String) {
            Parameters = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 40:
          if (field.Type == TType.String) {
            Name = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 50:
          if (field.Type == TType.I32) {
            EmployeeId = iprot.ReadI32();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 60:
          if (field.Type == TType.Double) {
            RaiseRate = iprot.ReadDouble();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 70:
          if (field.Type == TType.String) {
            AddressLine1 = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 80:
          if (field.Type == TType.String) {
            AddressLine2 = iprot.ReadString();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 90:
          if (field.Type == TType.String) {
            Icon = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 100:
          if (field.Type == TType.String) {
            LargeIcon = iprot.ReadBinary();
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("InheritedEntityThrift");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (Message != null && __isset.Message) {
      field.Name = "Message";
      field.Type = TType.String;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Message);
      oprot.WriteFieldEnd();
    }
    if (FunctionCall != null && __isset.FunctionCall) {
      field.Name = "FunctionCall";
      field.Type = TType.String;
      field.ID = 20;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(FunctionCall);
      oprot.WriteFieldEnd();
    }
    if (Parameters != null && __isset.Parameters) {
      field.Name = "Parameters";
      field.Type = TType.String;
      field.ID = 30;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Parameters);
      oprot.WriteFieldEnd();
    }
    if (Name != null && __isset.Name) {
      field.Name = "Name";
      field.Type = TType.String;
      field.ID = 40;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Name);
      oprot.WriteFieldEnd();
    }
    if (__isset.EmployeeId) {
      field.Name = "EmployeeId";
      field.Type = TType.I32;
      field.ID = 50;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(EmployeeId);
      oprot.WriteFieldEnd();
    }
    if (__isset.RaiseRate) {
      field.Name = "RaiseRate";
      field.Type = TType.Double;
      field.ID = 60;
      oprot.WriteFieldBegin(field);
      oprot.WriteDouble(RaiseRate);
      oprot.WriteFieldEnd();
    }
    if (AddressLine1 != null && __isset.AddressLine1) {
      field.Name = "AddressLine1";
      field.Type = TType.String;
      field.ID = 70;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(AddressLine1);
      oprot.WriteFieldEnd();
    }
    if (AddressLine2 != null && __isset.AddressLine2) {
      field.Name = "AddressLine2";
      field.Type = TType.String;
      field.ID = 80;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(AddressLine2);
      oprot.WriteFieldEnd();
    }
    if (Icon != null && __isset.Icon) {
      field.Name = "Icon";
      field.Type = TType.String;
      field.ID = 90;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(Icon);
      oprot.WriteFieldEnd();
    }
    if (LargeIcon != null && __isset.LargeIcon) {
      field.Name = "LargeIcon";
      field.Type = TType.String;
      field.ID = 100;
      oprot.WriteFieldBegin(field);
      oprot.WriteBinary(LargeIcon);
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("InheritedEntityThrift(");
    sb.Append("Message: ");
    sb.Append(Message);
    sb.Append(",FunctionCall: ");
    sb.Append(FunctionCall);
    sb.Append(",Parameters: ");
    sb.Append(Parameters);
    sb.Append(",Name: ");
    sb.Append(Name);
    sb.Append(",EmployeeId: ");
    sb.Append(EmployeeId);
    sb.Append(",RaiseRate: ");
    sb.Append(RaiseRate);
    sb.Append(",AddressLine1: ");
    sb.Append(AddressLine1);
    sb.Append(",AddressLine2: ");
    sb.Append(AddressLine2);
    sb.Append(",Icon: ");
    sb.Append(Icon);
    sb.Append(",LargeIcon: ");
    sb.Append(LargeIcon);
    sb.Append(")");
    return sb.ToString();
  }

}

